name: Create Release

on:
  workflow_call:
  workflow_dispatch:
  push:
    tags:
      - 'v*' # Trigger on version tags
jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for generating changelogs
      
      - name: Check if release exists
        id: check_release
        run: |
          EXISTING_RELEASE=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.GIT_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.create_tag.outputs.tag_name }})

            echo "release_exists: $EXISTING_RELEASE"

          if [[ "$EXISTING_RELEASE" != "Not Found" ]]; then
            echo "Release already exists for tag ${{ needs.create_tag.outputs.tag_name }}."
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing release (if exists)
        if: steps.check_release.outputs.release_exists == 'true'
        run: |
          RELEASE_ID=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.GIT_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.create_tag.outputs.tag_name }} | jq -r '.id')

          if [[ "$RELEASE_ID" != "null" ]]; then
          curl -s -X DELETE \
           -H "Authorization: Bearer ${{ secrets.GIT_ACCESS_TOKEN }}" \
           -H "Accept: application/vnd.github.v3+json" \
           https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag exists, get all commits
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            # Get commits since last tag
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges ${PREVIOUS_TAG}..HEAD)
          fi
          
          # Escape newlines and set output
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            <!-- Add installation instructions if applicable -->
            
            ## Documentation
            <!-- Add links to documentation if applicable -->
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
